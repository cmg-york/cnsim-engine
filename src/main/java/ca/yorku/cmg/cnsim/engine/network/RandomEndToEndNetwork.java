package ca.yorku.cmg.cnsim.engine.network;

import ca.yorku.cmg.cnsim.engine.config.Config;
import ca.yorku.cmg.cnsim.engine.node.NodeSet;
import ca.yorku.cmg.cnsim.engine.node.PoWNodeSet;
import ca.yorku.cmg.cnsim.engine.sampling.Sampler;


/**
 * Represents a network with random end-to-end connections between nodes.
 * <p>
 * For each pair of nodes, a throughput value indicates the number of bits that can travel 
 * from one node to the other in the unit of time (ignoring routing). This network is typically 
 *  an abstraction produced by applying all-possible-shortest-paths algorithms to the true 
 * structure and throughput of a network. It is agnostic to the actual physical structure 
 * or individual link throughputs.
 * </p>
 * <p>
 * The network is generated by randomly assigning throughputs to every node pair using a 
 * {@link Sampler} instance.
 * </p>
 * 
 * @author Sotirios Liaskos for the Conceptual Modeling Group @ York University
 * @see AbstractNetwork
 * @see Sampler
 */
public class RandomEndToEndNetwork extends AbstractNetwork {
	
	/** The sampler used to generate random throughputs */
	private Sampler sampler;
	
	   /**
     * Constructs a random network using the given {@link NodeSet} and {@link Sampler}.
     * Automatically populates the network with randomly sampled throughputs for all node pairs.
     * 
     * @param ns      the NodeSet representing the nodes in the network
     * @param sampler the Sampler used to randomly assign throughputs
     * @throws Exception if the NodeSet exceeds the maximum allowed number of nodes
     */
    public RandomEndToEndNetwork(NodeSet ns, Sampler sampler) throws Exception{
        super(ns);
        this.sampler = sampler;
        createRandomNetwork();
    }

    
    /**
     * Empty constructor for testing purposes.
     * The network is not initialized until {@link #createRandomNetwork()} is called.
     */
    public RandomEndToEndNetwork(){
    }
    
    
    /**
     * Creates the random network by assigning a sampled throughput to every pair of nodes.
     * <p>
     * Only non-diagonal entries of the throughput matrix are populated (i.e., i != j). 
     * The throughput value is mirrored in both directions: {@code Net[i][j]} and {@code Net[j][i]}.
     * </p>
     */
	private void createRandomNetwork(){
		for (int i=1; i <= Config.getPropertyInt("net.numOfNodes"); i++) {
			for (int j=1; j <= Config.getPropertyInt("net.numOfNodes"); j++) {
	            if(i!=j && Net[i][j] == 0) {
	            	float throughPut = (float) sampler.getNetworkSampler().getNextConnectionThroughput();
	            	super.setThroughput(i, j, throughPut);
	            	super.setThroughput(j, i, throughPut);
	            }
	        }
	    }
	}
}
